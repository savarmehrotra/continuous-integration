#+TITLE: The REST API
#+AUTHOR: VLEAD
#+DATE: [2016-07-26 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  This document illustrates building of the REST API.

  
* REST  
** Create github issue

#+NAME: create_issue
#+BEGIN_SRC python


def make_github_issue(title, body=None, assignee=None, milestone=None, labels=None):
    '''Create an issue on github.com using the given parameters.'''
    # Our url to create issues via POST                                                                                                                                  
    url = 'https://api.github.com/repos/%s/%s/issues' % (REPO_OWNER, REPO_NAME)
    # Create an authenticated session to create the issue                                                                                                                
    session = requests.Session()
    session.auth = (USERNAME, PASSWORD)
    # Create our issue                                                                                                                                                   
    issue = {'title': title,
             'body': body,
             'assignee': '',
             'milestone': None,
             'labels': ['build_failed']
             }
    # Add the issue to our repository                                                                                                                                    
    current_app.logger.debug("Creating github issue")
    r = session.post(url, json.dumps(issue))
    if r.status_code == 201:
        current_app.logger.debug("Successfully created Issue : %s" % title)
    else:
        current_app.logger.error("Could not creat Issue : %s" % title)
        current_app.logger.error("Response : %s" % r.content)

make_github_issue('Issue Title', 'Body text', 'assigned_user', 3, ['bug'])

#+END_SRC

** API to initiate contineous integration process

#+NAME: ci_hook
#+BEGIN_SRC python
@api.route("/ci_hook", methods = ['POST', 'GET'])
def ci_hook():

  if request.method == "GET":
      return "Method not allowed"

  elif request.method == 'POST':
      repo_data = request.get_json()
      git_url = repo_data['repository']['html_url']
      current_app.logger.debug("Git repository URL : %s" % (git_url))
  else:
      return "Method not allowed"

  a = os.system('git clone https://github.com/vlead/continuous-integration.git')
  if a == 0:
      print "Repo not present, begin cloning"
  else:
      print "Repo already present,Clone not required"
      cmd = os.system('cd continuous-integration; git checkout develop; git pull')
      if cmd == 0:
	  cmd1 = os.system('cd continuous-integration; make')
	  if cmd1 == 0:
	      print "make is successful"

	  else:
	      print "failed to run make"

        

#+END_SRC


* Infra                                                         :boilerplate:
  
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import requests
import json
from runtime.config.git_config import USERNAME, PASSWORD
from flask import session, render_template, Blueprint, request, \
     jsonify, abort, current_app, redirect, url_for
from flask import Flask
import yaml
api = Blueprint('APIs', __name__)
import os

#+end_src

** tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from sqlalchemy.exc import IntegrityError
from runtime.utils.class_persistence_template import db
from runtime.rest.app import create_app
from runtime.config.system_config import KEY
from runtime.rest.api import *
from runtime.system.system import System
import datetime
config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangle                                                        :boilerplate:
  
** sources
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes
<<imports_for_sources>>
<<create_issue>>
<<ci_hook>>
#+END_SRC

** tests
#+BEGIN_SRC python :tangle test_api.py :eval no :noweb yes
<<imports_for_tests>>
<<test_ci_hook>>
<<run_test_cases>>
#+end_src
