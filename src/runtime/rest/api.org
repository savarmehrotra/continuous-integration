#+TITLE: The REST API
#+AUTHOR: VLEAD
#+DATE: [2016-07-26 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  This document illustrates building of the REST API which is able to
  identify a change made to the repo and respectively run the make
  command


* REST  

** Execute commands

#+NAME: exec_commands
#+BEGIN_SRC python

def execute_command(cmd):
    current_app.logger.debug("command: %s" % cmd)
    return_code = -1
    output = None
    try:
        output = subprocess.check_output(cmd, shell=True)
        return_code = 0
    except subprocess.CalledProcessError as cpe:
        current_app.logger.error("Called Process Error Message: %s" % cpe.output)
        raise cpe
    except OSError as ose:
        current_app.logger.error("OSError: %s" % ose.output)
        raise ose

    return (return_code, output)

#+END_SRC
** Repo_exist
#+NAME: repo_exist
#+BEGIN_SRC python
def repo_exist(repo_name):
    current_app.logger.debug("Checking repo %s existance" % (repo_name))

    try:
       ret_val = os.path.exists(repo_name)
       return ret_val

    except subprocess.CalledProcessError as cpe:
        current_app.logger.error("Called Process Error Message: %s" % cpe.output)
        raise cpe

    except OSError as ose:
        current_app.logger.error("OSError: %s" % ose.output)
        raise ose

#+END_SRC

** Clone_repo
#+NAME: clone_repo
#+BEGIN_SRC python
def clone_repo(git_url): 

  repo_name = get_repo_name(git_url)
  ret_val = repo_exist(repo_name)

  if not ret_val:
      command = "git clone %s; cd %s;git checkout develop;git pull" % (git_url, repo_name)
      current_app.logger.debug("Git clone command : %s" % (command))
      (ret_code, output) = execute_command(command)
      if ret_code == 0:
	  current_app.logger.debug("Successfully cloned repo : %s" % (git_url))
	  return True
  else:
      current_app.logger.debug("repository already present, pulling repo : %s" % (git_url))
      command = "cd %s; git checkout develop;git pull" % (repo_name)
      (ret_code, output) = execute_command(command)
      if ret_code == 0:
	  current_app.logger.debug("Successfully pulls the repository : %s" % (git_url))
	  return True
      else:
	  current_app.logger.debug("Failed to pulls the repository : %s" % (git_url))
	  return False
#+END_SRC

** Get repo_name

#+NAME: get_repo_name
#+BEGIN_SRC python

def get_repo_name(repo_url):
    try:
       repo_name = repo_url.split("/")[-1]
       current_app.logger.debug("repo_name %s" % (repo_name))
       return repo_name
    except Exception as e:
       current_app.logger.error("Exception %s" % (str(e)))
       raise str(e)
#+END_SRC


** Build the repository
#+NAME: build_repo
#+BEGIN_SRC python

def build_repo(repo_name):
   current_app.logger.debug("Running make command")
   mk_cmd = 'cd %s;make' % (repo_name)
   (ret_code, output) = execute_command(mk_cmd)
   if ret_code == 0:
        current_app.logger.debug("build generated successfully")
	current_app.logger.debug("Creating github issue")
        ret_status = make_github_issue(repo_name, 'Build ran successfully', 'Build ran successfully and docs are moved to doc server', 'assigned_user', 3, ['build_passed'])
	if ret_status:
            current_app.logger.debug("Created github issue")
	    return True
        else:
            current_app.logger.debug("Failed to create github issue")
        return True
   else:
        current_app.logger.debug("Couldn't generate build")
	current_app.logger.debug("Creating github issue")
        ret_status = make_github_issue(repo_name, 'Failed to run build', 'Body text', 'assigned_user', 3, ['build_failed'])
	if ret_status:
	    current_app.logger.debug("Created github issue")
	return False
#+END_SRC


** Create github issue
   
#+NAME: create_issue
#+BEGIN_SRC python

REPO_OWNER = "ksripathi"
def make_github_issue(repo_name, title, body=None, assignee=None, milestone=None, labels=None):

  url = 'https://api.github.com/repos/%s/%s/issues' % (REPO_OWNER, repo_name)
  try:
      session = requests.Session()
      session.auth = (USERNAME, PASSWORD)
      issue = {'title': title,
	       'body': body,
	       'assignee': '',
	       'milestone': None,
	       'labels': labels
	   }

      current_app.logger.debug("Creating github issue")
      r = session.post(url, json.dumps(issue))
      if r.status_code == 201:
	  current_app.logger.debug("Successfully created Issue : %s" % title)
	  return True
      else:
	  current_app.logger.error("Could not creat Issue : %s" % title)
	  current_app.logger.error("Response : %s" % r.content)
	  return False
  except Exception as e:
      current_app.logger.error("Exception : %s" % str(e))
      raise str(e)

#+END_SRC


** Push the docs file

#+NAME: push_docs
#+BEGIN_SRC python

def push_docs(repo_name):
  SRC_DIR = ("%s/build/docs" % (repo_name))
  try:
      copy_command = "rsync -arz --progress " + SRC_DIR + " " + IP_ADDRESS + ":" + DEST_DIR
      current_app.logger.debug("copy command = %s" % copy_command)
      (ret_code, output) = execute_command(copy_command)
      if ret_code == 0:
	  current_app.logger.debug("Copy successful")
	  return True
      else:
	  current_app.logger.debug("Copy Unsuccessful, return code is %s" % str(ret_code))
	  return False
  except Exception, e:
      current_app.logger.error("ERROR = %s" % str(e))
      return False

#+END_SRC


** API accepts the JSON sent by the git hub webhook via a POST request 
*** API Design
  :PROPERTIES:
  :CUSTOM_ID: ci_hook_api
  :END:    
  - URL :: /ci_hook

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
    {
      "zen": "Responsive is better than fast.",
      "hook_id": 14493403,
      "hook": {
        "type": "Repository",
        "id": 14493403,
        "name": "web",
        "active": true,
        "events": [
          "push"
        ],
        "config": {
          "content_type": "json",
          "insecure_ssl": "0",
          "url": "http://ci.vlabs.ac.in:5000/git"
        },
        "updated_at": "2017-06-21T09:35:07Z",
        "created_at": "2017-06-21T09:35:07Z",
        "url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks/14493403",
        "test_url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks/14493403/test",
        "ping_url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks/14493403/pings",
        "last_response": {
          "code": null,
          "status": "unused",
          "message": null
        }
      },
      "repository": {
        "id": 93591178,
        "name": "lab-data-service",
        "full_name": "ksripathi/lab-data-service",
        "owner": {
          "login": "ksripathi",
          "id": 8774380,
          "avatar_url": "https://avatars3.githubusercontent.com/u/8774380?v=3",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ksripathi",
          "html_url": "https://github.com/ksripathi",
          "followers_url": "https://api.github.com/users/ksripathi/followers",
          "following_url": "https://api.github.com/users/ksripathi/following{/other_user}",
          "gists_url": "https://api.github.com/users/ksripathi/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ksripathi/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ksripathi/subscriptions",
          "organizations_url": "https://api.github.com/users/ksripathi/orgs",
          "repos_url": "https://api.github.com/users/ksripathi/repos",
          "events_url": "https://api.github.com/users/ksripathi/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ksripathi/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/ksripathi/lab-data-service",
        "description": null,
        "fork": true,
        "url": "https://api.github.com/repos/ksripathi/lab-data-service",
        "forks_url": "https://api.github.com/repos/ksripathi/lab-data-service/forks",
        "keys_url": "https://api.github.com/repos/ksripathi/lab-data-service/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/ksripathi/lab-data-service/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/ksripathi/lab-data-service/teams",
        "hooks_url": "https://api.github.com/repos/ksripathi/lab-data-service/hooks",
        "issue_events_url": "https://api.github.com/repos/ksripathi/lab-data-service/issues/events{/number}",
        "events_url": "https://api.github.com/repos/ksripathi/lab-data-service/events",
        "assignees_url": "https://api.github.com/repos/ksripathi/lab-data-service/assignees{/user}",
        "branches_url": "https://api.github.com/repos/ksripathi/lab-data-service/branches{/branch}",
        "tags_url": "https://api.github.com/repos/ksripathi/lab-data-service/tags",
        "blobs_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/ksripathi/lab-data-service/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/ksripathi/lab-data-service/languages",
        "stargazers_url": "https://api.github.com/repos/ksripathi/lab-data-service/stargazers",
        "contributors_url": "https://api.github.com/repos/ksripathi/lab-data-service/contributors",
        "subscribers_url": "https://api.github.com/repos/ksripathi/lab-data-service/subscribers",
        "subscription_url": "https://api.github.com/repos/ksripathi/lab-data-service/subscription",
        "commits_url": "https://api.github.com/repos/ksripathi/lab-data-service/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/ksripathi/lab-data-service/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/ksripathi/lab-data-service/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/ksripathi/lab-data-service/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/ksripathi/lab-data-service/contents/{+path}",
        "compare_url": "https://api.github.com/repos/ksripathi/lab-data-service/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/ksripathi/lab-data-service/merges",
        "archive_url": "https://api.github.com/repos/ksripathi/lab-data-service/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/ksripathi/lab-data-service/downloads",
        "issues_url": "https://api.github.com/repos/ksripathi/lab-data-service/issues{/number}",
        "pulls_url": "https://api.github.com/repos/ksripathi/lab-data-service/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/ksripathi/lab-data-service/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/ksripathi/lab-data-service/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/ksripathi/lab-data-service/labels{/name}",
        "releases_url": "https://api.github.com/repos/ksripathi/lab-data-service/releases{/id}",
        "deployments_url": "https://api.github.com/repos/ksripathi/lab-data-service/deployments",
        "created_at": "2017-06-07T04:04:59Z",
        "updated_at": "2017-06-07T04:05:00Z",
        "pushed_at": "2017-06-08T11:11:07Z",
        "git_url": "git://github.com/ksripathi/lab-data-service.git",
        "ssh_url": "git@github.com:ksripathi/lab-data-service.git",
        "clone_url": "https://github.com/ksripathi/lab-data-service.git",
        "svn_url": "https://github.com/ksripathi/lab-data-service",
        "homepage": null,
        "size": 8979,
        "stargazers_count": 0,
        "watchers_count": 0,
        "language": "Shell",
        "has_issues": false,
        "has_projects": true,
        "has_downloads": true,
        "has_wiki": true,
        "has_pages": false,
        "forks_count": 0,
        "mirror_url": null,
        "open_issues_count": 0,
        "forks": 0,
        "open_issues": 0,
        "watchers": 0,
        "default_branch": "master"
      },
      "sender": {
        "login": "ksripathi",
        "id": 8774380,
        "avatar_url": "https://avatars3.githubusercontent.com/u/8774380?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ksripathi",
        "html_url": "https://github.com/ksripathi",
        "followers_url": "https://api.github.com/users/ksripathi/followers",
        "following_url": "https://api.github.com/users/ksripathi/following{/other_user}",
        "gists_url": "https://api.github.com/users/ksripathi/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ksripathi/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ksripathi/subscriptions",
        "organizations_url": "https://api.github.com/users/ksripathi/orgs",
        "repos_url": "https://api.github.com/users/ksripathi/repos",
        "events_url": "https://api.github.com/users/ksripathi/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ksripathi/received_events",
        "type": "User",
        "site_admin": false
      }
    }

#+END_EXAMPLE
  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
"status_code" : 200,
"message" : "Successfully copied docs to server" 
}
#+END_EXAMPLE    
  - Error Response:
    + Contents :
      {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
 http://localhost:5000/ci_hook
#+END_EXAMPLE
*** Implementation   
#+NAME: ci_hook
#+BEGIN_SRC python
@api.route("/ci_hook", methods = ['POST', 'GET'])
def ci_hook():

  if request.method == "GET":
      return "Method not allowed"

  elif request.method == 'POST':
      repo_data = request.get_json()
      git_url = repo_data['repository']['html_url']
      current_app.logger.debug("Git repository URL : %s" % (git_url))
  else:
      return "Method not allowed"

  cmd_status = clone_repo(git_url)
  if cmd_status == True:
     repo_name = get_repo_name(git_url)  
     status = build_repo(repo_name)
     if status == True:
	 status = push_docs(repo_name)  
	 if status == True:
	     current_app.logger.debug("Successfully copied docs to doc server")
	     message = {
	               "status_code" : 200,
	               "message" : "Successfully copied docs to server" 
		       }

	     return jsonify(message)
	 else:
	     current_app.logger.error("Successfully copied docs to doc server")
     else:
	 current_app.logger.error("Error while running build")

  else:
      current_app.logger.error("Error while running clone")
      

#+END_SRC


* Infra                                                         :boilerplate:
  
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import requests
import json
import subprocess
from runtime.config.git_config import USERNAME, PASSWORD, IP_ADDRESS, DEST_DIR
from flask import session, render_template, Blueprint, request, \
     jsonify, abort, current_app, redirect, url_for
from flask import Flask
import yaml
api = Blueprint('APIs', __name__)
import os

#+end_src


** tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from runtime.rest.app import create_app
from runtime.rest.api import *
import datetime
config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangle                                                        :boilerplate:
  
** sources
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes
<<imports_for_sources>>
<<exec_commands>>
<<clone_repo>>
<<repo_exist>>
<<get_repo_name>>
<<build_repo>>
<<create_issue>>
<<push_docs>>
<<ci_hook>>
#+END_SRC


** tests
#+BEGIN_SRC python :tangle test_api.py :eval no :noweb yes
<<imports_for_tests>>
<<test_ci_hook>>
<<run_test_cases>>
#+end_src
