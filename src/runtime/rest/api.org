#+TITLE: The REST API
#+AUTHOR: VLEAD
#+DATE: [2016-07-26 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  This document illustrates building of the REST API which is able to identify a change made to the repo and respectively 
  run the make command

  
* REST
  
** API accept the JSON sent by the git hub webhook via a POST request 
   - 

#+NAME: ci_hook
#+BEGIN_SRC python
@api.route("/ci_hook", methods = ['POST', 'GET'])
def ci_hook():

  if request.method == "GET":
      return "Method not allowed"

  elif request.method == 'POST':
      repo_data = request.get_json()
      git_url = repo_data['repository']['html_url']
      return git_url
  else:
      return "Method not allowed"
  
  clone_build()
   
#+END_SRC



** API to Clone/Pull the Repo and later execute the make command
   
   #+NAME: ci_hook
   #+BEGIN_SRC python
   
   def clone_build():
   	status1 = os.system('git clone https://github.com/vlead/continuous-integration.git')
	if status == 0:
		print "Repo not present in the directory,cloning it
		status2 = os.system('cd continuous-integration; make')
		if status2 == 0:
		      print "make ran successfully"

		  else:
		      print "failed to run make"
	else:
		print "Repo already present,Cloning not required"
		status3 = os.system('cd continuous-integration; git checkout develop; git pull')
	      
	      	if status3 == 0:
			status4 = os.system('cd continuous-integration; make')
			if status4 == 0:
		      		print "make ran successfully"
			else:
		      		print "failed to run make"
		else:
			print "Couldn't Pull "
	#+END_SRC


* Infra                                                         :boilerplate:
  
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import requests
import json
from flask import session, render_template, Blueprint, request, \
     jsonify, abort, current_app, redirect, url_for
from flask import Flask
import yaml
api = Blueprint('APIs', __name__)
import os

#+end_src

** tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from sqlalchemy.exc import IntegrityError
from runtime.utils.class_persistence_template import db
from runtime.rest.app import create_app
from runtime.config.system_config import KEY
from runtime.rest.api import *
from runtime.system.system import System
import datetime
config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC

* Tangle                                                        :boilerplate:
  
** sources
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes
<<imports_for_sources>>
<<ci_hook>>
#+END_SRC

** tests
#+BEGIN_SRC python :tangle test_api.py :eval no :noweb yes
<<imports_for_tests>>
<<test_ci_hook>>
<<run_test_cases>>
#+end_src
