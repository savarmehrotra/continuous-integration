#+TITLE: The REST API
#+AUTHOR: VLEAD
#+DATE: [2016-07-26 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  This document illustrates building of the REST API which is able to
  identify a change made to the repo and respectively run the make
  command


* REST  

** Execute commands

#+NAME: exec_commands
#+BEGIN_SRC python

def execute_command(cmd):
    current_app.logger.debug("command: %s" % cmd)
    return_code = -1
    output = None
    try:
        output = subprocess.check_output(cmd, shell=True)
        return_code = 0
    except subprocess.CalledProcessError as cpe:
        current_app.logger.error("Called Process Error Message: %s" % cpe.output)
        raise cpe
    except OSError as ose:
        current_app.logger.error("OSError: %s" % ose.output)
        raise ose

    return (return_code, output)

#+END_SRC


** Get repo_name

#+NAME: get_repo_name
#+BEGIN_SRC python

def get_repo_name(repo_url):
    repo_name = repo_url.split("/")[-1]
    current_app.logger.debug("repo_name %s" % (repo_name))
    return repo_name
#+END_SRC


** Build the repository
#+NAME: build_repo
#+BEGIN_SRC python

def build_repo(repo_name):
   current_app.logger.debug("Running make command")
   mk_cmd = os.system('cd lab-data-service; make')
   if mk_cmd == 0:
        make_github_issue('Build ran successfully', 'Body text', 'assigned_user', 3, ['build_passed'])
	current_app.logger.debug("make ran successfully")
	return True
   else:
        make_github_issue('Failed to run build', 'Body text', 'assigned_user', 3, ['build_failed'])
	current_app.logger.debug("Failed to run make")
	return False
#+END_SRC


** Create github issue
   
#+NAME: create_issue
#+BEGIN_SRC python

def make_github_issue(title, body=None, assignee=None, milestone=None, labels=None):
    '''Create an issue on github.com using the given parameters.'''
    # Our url to create issues via POST                                                                                                                                  
    url = 'https://api.github.com/repos/%s/%s/issues' % (REPO_OWNER, REPO_NAME)
    # Create an authenticated session to create the issue                                                                                                                
    session = requests.Session()
    session.auth = (USERNAME, PASSWORD)
    # Create our issue                                                                                                                                                   
    issue = {'title': title,
             'body': body,
             'assignee': '',
             'milestone': None,
             'labels': [labels]
             }
    # Add the issue to our repository                                                                                                                                    
    current_app.logger.debug("Creating github issue")
    r = session.post(url, json.dumps(issue))
    if r.status_code == 201:
        current_app.logger.debug("Successfully created Issue : %s" % title)
    else:
        current_app.logger.error("Could not creat Issue : %s" % title)
        current_app.logger.error("Response : %s" % r.content)



#+END_SRC


** Push the docs file

#+NAME: push_docs
#+BEGIN_SRC python

def push_docs(repo_name):
  src_dir = ("%s/build/docs" % (repo_name))
  dest_dir = '/var/www'
  NO_STRICT_CHECKING = "StrictHostKeyChecking no"
  IP_ADDRESS = "root@doc.vlabs.ac.in"
  try:
      copy_command = "rsync -arz --progress " + src_dir + " " + IP_ADDRESS + ":" + dest_dir
      current_app.logger.debug("copy command = %s" % copy_command)
      command = (r'ssh -o "%s" "%s"' %
		 (NO_STRICT_CHECKING, copy_command))
      current_app.logger.debug("Command = %s" % command)
      (ret_code, output) = execute_command(command)
      if ret_code == 0:
	  current_app.logger.debug("Copy successful")
	  return True
      else:
	  current_app.logger.debug("Copy Unsuccessful, return code is %s" % str(ret_code))
	  return False
  except Exception, e:
      current_app.logger.error("ERROR = %s" % str(e))
      return False

#+END_SRC


** API accepts the JSON sent by the git hub webhook via a POST request 

#+NAME: ci_hook
#+BEGIN_SRC python
@api.route("/ci_hook", methods = ['POST', 'GET'])
def ci_hook():

  if request.method == "GET":
      return "Method not allowed"

  elif request.method == 'POST':
      repo_data = request.get_json()
      git_url = repo_data['repository']['html_url']
      current_app.logger.debug("Git repository URL : %s" % (git_url))
  else:
      return "Method not allowed"

  status = clone_repo(git_url)
  if status == True:
     repo_name = get_repo_name(git_url)  
     status = build_repo(repo_name)
     if status == True:
	 status = push_docs(repo_name)  
	 if status == True:
	     current_app.logger.debug("Successfully copied docs to doc server")
	     return "Successfully copied files to doc server"
	 else:
	     current_app.logger.error("Successfully copied docs to doc server")
     else:
	 current_app.logger.error("Error while running build")

  else:
      print "error"

#+END_SRC


* Infra                                                         :boilerplate:
  
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import requests
import json
import subprocess
from runtime.config.git_config import USERNAME, PASSWORD
from flask import session, render_template, Blueprint, request, \
     jsonify, abort, current_app, redirect, url_for
from flask import Flask
import yaml
api = Blueprint('APIs', __name__)
import os

#+end_src


** tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from runtime.rest.app import create_app
from runtime.rest.api import *
import datetime
config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangle                                                        :boilerplate:
  
** sources
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes
<<imports_for_sources>>
<<exec_commands>>
<<get_repo_name>>
<<build_repo>>
<<create_issue>>
<<push_docs>>
<<ci_hook>>
#+END_SRC


** tests
#+BEGIN_SRC python :tangle test_api.py :eval no :noweb yes
<<imports_for_tests>>
<<test_ci_hook>>
<<run_test_cases>>
#+end_src
